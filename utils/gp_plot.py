import matplotlib.pyplot as plt
import os
import argparse
from scipy.optimize import curve_fit
import numpy as np

def log_func(x, a, b):
    return a * np.log(x) + b

def log_func_fixed(xs, a, b):
    out = []
    for x in xs:
        out.append(-800 * np.log(x) + 3000)
    return out

def log_func2(xs, b, a):
    out = []
    for x in xs:
        out.append(float(a) * np.log(x) + float(b))
    return out

def exp_func(x, a, b):
    return a * np.exp(x) + b

def parse_flags():
    parser = argparse.ArgumentParser()
    # parse args
    parser.add_argument("-i", "--input",                help="Geneparser output folder location",                     type=str, required=True)
    parser.add_argument("-g", "--genome-progression",   help="Graph data generated by genome progression",            action="store_true", dest="gen")
    parser.add_argument("-p", "--identity-progression", help="Graph data generated by identity/coverage progression", action="store_true", dest="ident")

    return parser.parse_args()

flags = parse_flags()

def plot_geonome_progression():
    # find file
    cutoff = 0
    if os.path.exists("core_pan.csv"):
        core_counts, pan_counts = [], []
        with open("core_pan.csv", "r") as file:
            for n, line in enumerate(file):
                if n >= cutoff:
                    parts = line.rstrip().split(",")
                    pan_counts.append(int(parts[0]))
                    core_counts.append(int(parts[1]))

        core_counts[0], core_counts[1] = pan_counts[0], pan_counts[1]
        count = len(core_counts)
        x = [float(num) for num in list(range(cutoff + 1,count + cutoff + 1))]
        fig, ax1 = plt.subplots()
        # ax2 = ax1.twinx()

        ax1.plot(x, pan_counts, "o", color="b", label="Pan Genome")
        ax1.plot(x, core_counts, "o", color="g", label="Core Genome")

        # curve fit
        pan_fit = np.polyfit(np.log(x), pan_counts, 1)
        core_fit = curve_fit(lambda t,a,b: a+b*np.log(t),  x,  core_counts, p0=(2000., -600.))
        print(core_fit)
        # core_fit = np.polyfit(np.log(x), core_counts, 1)
        # print(core_fit)

        # fit line
        pan2 = log_func(x, *pan_fit)
        # core2 = log_func_fixed(x, *core_fit)
        core2 = log_func2(x, *core_fit[0])
        ax1.plot(x, pan2, color="b")
        ax1.plot(x, core2, color="g")
        ax1.set_ylabel("Number of genes")
        ax1.set_xlabel("Number of genomes")
        plt.xlim(cutoff + 1, count)
        plt.legend(loc="upper left")
        plt.show()
    else:
        exit("Unable to find core_pan.csv in output folder")

def plot_identity_progression():
    # find file
    if os.path.exists("values_list.csv"):
        core_counts, pan_counts, unique_counts, overlap_counts, identities, coverages = [], [], [], [], [], []
        with open("values_list.csv", "r") as file:
            for line in file:
                parts = line.rstrip().split(",")
                identities.append(float(parts[0]))
                coverages.append(float(parts[1]))
                core_counts.append(float(parts[3]))
                pan_counts.append(float(parts[4]))
                unique_counts.append(float(parts[5]))
                overlap_counts.append(float(parts[6]))

        plt.plot(identities, pan_counts, "-o", color="b", label="Pan Genome")
        plt.plot(identities, core_counts, "-o", color="g", label="Core Genome")
        plt.plot(identities, unique_counts, "-o", color="r", label="Unique Genes")
        plt.plot(identities, overlap_counts, "-o", color="m", label="Core/Pan Overlap Genes")
        plt.legend(loc="upper right")
        plt.xlabel("Percent Indentity Cutoff")
        plt.ylabel("Number of Genes")
        plt.show()
    else:
        exit("Unable to find value_list.csv in output folder")


if __name__ == "__main__":
    os.chdir(flags.input)
    if flags.gen:
        plot_geonome_progression()
    if flags.ident:
        plot_identity_progression()
